// 1. Action 
export const incrementNumber = (num) => {
    return {
        type: "INCREMENT",
        payload:num,
    }
}
export const decrementNumber = () => {
    return {
        type: "DECREMENT"
    }
}



// 2. Reducer
const initialState = 10;
const changeTheNumber = (state = initialState, action) => {
    switch (action.type) {
        case "INCREMENT": return state + action.payload;
        case "DECREMENT": return state - 1;
        default: return state;
    }
}

export default changeTheNumber;


// 3. Combine Reducer
import changeTheNumber from "./upDown";

import { combineReducers } from "redux";

const rootReducer = combineReducers({
    changeTheNumber,
})

export default rootReducer;

// or  create store
import { createStore } from 'redux'

import rootReducer from './reducers/index'

const store = createStore(rootReducer);

export default store;



// 4. Interact
import { useSelector } from 'react-redux/es/hooks/useSelector';
import { useDispatch } from 'react-redux';

import {incrementNumber,decrementNumber} from './action/index'


const myState = useSelector((state)=>state.changeTheNumber);
  const dispatch = useDispatch();


 onClick={()=>dispatch(decrementNumber())}



// 5.Redux Provider
import { Provider } from 'react-redux';
import store from './store';

store.subscribe(() => console.log(store.getState()))
<Provider store={store}>
    {/* Props passing */}
    <App />
    </Provider>

